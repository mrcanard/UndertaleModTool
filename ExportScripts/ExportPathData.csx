// Made by mono21400

using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using UndertaleModLib.Util;

EnsureDataLoaded();

// Pour avoir un "." au lieu d'une "," dans les conversion en d√©cimal
System.Globalization.CultureInfo customCulture = (System.Globalization.CultureInfo)
    System.Threading.Thread.CurrentThread.CurrentCulture.Clone();
customCulture.NumberFormat.NumberDecimalSeparator = ".";

System.Threading.Thread.CurrentThread.CurrentCulture = customCulture;

string fntPaths = GetFolder(FilePath) + "paths" + Path.DirectorySeparatorChar;

if (Directory.Exists(fntPaths))
{
    Directory.Delete(fntPaths, true);
}

Directory.CreateDirectory(fntPaths);

await DumpPaths();

// Export asset
if(Data.IsGameMaker2()) {
    using (StreamWriter writer = new StreamWriter(fntPaths + "asset_order.txt"))
    {
        for (int i = 0; i < Data.Paths.Count; i++)
        {
            UndertalePath path = Data.Paths[i];
            writer.WriteLine(
                "    {\"id\":{\"name\":\""
                + path.Name.Content
                + "\",\"path\":\"paths/"
                + path.Name.Content
                + "/"
                + path.Name.Content
                + ".yy\",},},"
            );
        }
    }
} else {
    using (StreamWriter writer = new StreamWriter(fntPaths + "asset_order.txt"))
    {
        writer.WriteLine("  <paths name=\"paths\">");
        for (int i = 0; i < Data.Paths.Count; i++)
        {
            UndertalePath path = Data.Paths[i];
            writer.WriteLine("    <path>paths\\" + path.Name.Content + "</path>");
        }
        writer.WriteLine("  </paths>");
    }
}

ScriptMessage("Export Complete.\n\nLocation: " + fntPaths);

string GetFolder(string path)
{
    return Path.GetDirectoryName(path) + Path.DirectorySeparatorChar;
}

async Task DumpPaths()
{
    await Task.Run(() => Parallel.ForEach(Data.Paths, DumpPath));
}

void DumpPath(UndertalePath path)
{
    if(Data.IsGameMaker2()) {
        Directory.CreateDirectory(fntPaths + path.Name.Content);

        using (StreamWriter writer = new StreamWriter(fntPaths + path.Name.Content + Path.DirectorySeparatorChar + path.Name.Content + ".yy"))
        {
            writer.WriteLine("{");
            writer.WriteLine("  \"resourceType\": \"GMPath\",");
            writer.WriteLine("  \"resourceVersion\": \"1.0\",");
            writer.WriteLine("  \"name\": \"" + path.Name.Content + "\",");
            writer.WriteLine("  \"closed\": " + (path.IsClosed ? "true" : "false") + ",");
            writer.WriteLine("  \"kind\": " + (path.IsSmooth ? -1 : 0) + ",");
            writer.WriteLine("  \"parent\": {");
            writer.WriteLine("    \"name\": \"Paths\",");
            writer.WriteLine("    \"path\": \"folders/Paths.yy\",");
            writer.WriteLine("  },");
            if (path.Points.Count > 1)
            {
                writer.WriteLine("  \"points\": [");
                foreach (var g in path.Points)
                {
                    writer.WriteLine(
                        "    {\"speed\":"
                        + g.Speed.ToString("0.0")
                        + ",\"x\":"
                        + g.X.ToString("0.0")
                        + ",\"y\":"
                        + g.Y.ToString("0.0")
                        + ",},"
                    );
                }
                writer.WriteLine("  ],");
            }
            else {
                writer.WriteLine("  \"points\": [],");
            }
            writer.WriteLine("  \"precision\": " + path.Precision + ",");
            writer.Write("}");
        }
    } else {
        using (StreamWriter writer = new StreamWriter(fntPaths + path.Name.Content + ".path.gmx"))
        {
            writer.WriteLine(
                "<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->"
            );
            writer.WriteLine("<path>");
            if (path.IsSmooth)
            {
                writer.WriteLine("  <kind>-1</kind>");
            }
            else
            {
                writer.WriteLine("  <kind>0</kind>");
            }
            if (path.IsClosed)
            {
                writer.WriteLine("  <closed>-1</closed>");
            }
            else
            {
                writer.WriteLine("  <closed>0</closed>");
            }
            writer.WriteLine("  <precision>" + path.Precision + "</precision>");
            writer.WriteLine("  <backroom>-1</backroom>");
            writer.WriteLine("  <hsnap>16</hsnap>");
            writer.WriteLine("  <vsnap>16</vsnap>");
            writer.WriteLine("  <points>");
            foreach (var g in path.Points)
            {
                writer.WriteLine("    <point>" + g.X + "," + g.Y + "," + g.Speed + "</point>");
            }
            writer.WriteLine("  </points>");
            writer.WriteLine("</path>");
        }

    }
}
